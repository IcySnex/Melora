import{_ as p}from"./platform-support-configure-BTBvZuXh.js";import{_ as i}from"./metadata-configure-DOqaDEi0.js";import{_ as r,c,a as n,e as l,d as o,f as a,b as t,r as u,o as d}from"./app-DS8RxCfC.js";const y={};function F(g,s){const e=u("RouteLink");return d(),c("div",null,[s[85]||(s[85]=n("p",null,"When building a plugin, you may need to store settings that users can customize. Melora makes this easy by integrating your plugin's configs into the main Melora configuration.",-1)),s[86]||(s[86]=n("h2",{id:"what-is-a-config",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-a-config"},[n("span",null,"What Is A Config?")])],-1)),n("p",null,[s[4]||(s[4]=l("When initializing your plugin class, you need to provide a corresponding config to the base class (e.g. ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/PlatformSupportPlugin.html"},{default:a(()=>s[0]||(s[0]=[n("code",null,"PlatformSupportPlugin",-1)])),_:1}),s[5]||(s[5]=l(" requires a ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/PlatformSupportPluginConfig.html"},{default:a(()=>s[1]||(s[1]=[n("code",null,"PlatformSupportPluginConfig",-1)])),_:1}),s[6]||(s[6]=l(", ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/MetadataPlugin.html"},{default:a(()=>s[2]||(s[2]=[n("code",null,"MetadataPlugin",-1)])),_:1}),s[7]||(s[7]=l(" requires a ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/MetadataPluginConfig.html"},{default:a(()=>s[3]||(s[3]=[n("code",null,"MetadataPluginConfig",-1)])),_:1}),s[8]||(s[8]=l(", etc.)."))]),n("p",null,[s[10]||(s[10]=l("These specific configs implement the ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IPluginConfig.html"},{default:a(()=>s[9]||(s[9]=[n("code",null,"IPluginConfig",-1)])),_:1}),s[11]||(s[11]=l(" interface, which looks like this:"))]),s[87]||(s[87]=t(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#BB9AF7;"> interface</span><span style="color:#C0CAF5;"> IPluginConfig</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C0CAF5;">    IOption</span><span style="color:#89DDFF;">[]</span><span style="color:#C0CAF5;"> Options</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#BB9AF7;"> set</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">    void</span><span style="color:#7AA2F7;"> Reset</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n("p",null,[s[13]||(s[13]=l("As you can see, a config ")),s[14]||(s[14]=n("strong",null,"must",-1)),s[15]||(s[15]=l(" include a field for any additional options you may want to add. More on that ")),o(e,{to:"/plugin-development/configs.html#custom-options"},{default:a(()=>s[12]||(s[12]=[l("later")])),_:1}),s[16]||(s[16]=l(". The interface also requires a method to ")),s[17]||(s[17]=n("strong",null,"reset",-1)),s[18]||(s[18]=l(" the config. However, you typically don't need to implement this yourself, as the specific plugin classes handle all the heavy lifting."))]),s[88]||(s[88]=n("h4",{id:"example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#example"},[n("span",null,"Example:")])],-1)),n("p",null,[s[20]||(s[20]=l("For instance, ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/PlatformSupportPluginConfig.html"},{default:a(()=>s[19]||(s[19]=[n("code",null,"PlatformSupportPluginConfig",-1)])),_:1}),s[21]||(s[21]=l()),s[22]||(s[22]=n("strong",null,"requires",-1)),s[23]||(s[23]=l(" a few parameters, such as the download quality, format, etc., which you ")),s[24]||(s[24]=n("strong",null,"must",-1)),s[25]||(s[25]=l(" include."))]),s[89]||(s[89]=t(`<p>When initializing your plugin, you can use the constructor of these configs. This allows you to pass in your <strong>default config values</strong> (used if the Melora client can&#39;t find any existing configs for your plugin or when the user resets your plugin config) and an <strong>instance of an existing config</strong> (if it exists).</p><p>Hereâ€™s what the constructor for a specific plugin config might look like:</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> PlatformSupportPluginConfig</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#C0CAF5;">    IOption</span><span style="color:#89DDFF;">[]</span><span style="color:#C0CAF5;"> defaultOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    Quality</span><span style="color:#C0CAF5;"> defaultQuality</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    Format</span><span style="color:#C0CAF5;"> defaultFormat</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BB9AF7;">    int</span><span style="color:#89DDFF;">?</span><span style="color:#C0CAF5;"> defaultSearchResultsLimit</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    Sorting</span><span style="color:#C0CAF5;"> defaultSearchResultsSorting</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BB9AF7;">    bool</span><span style="color:#C0CAF5;"> defaultSearchResultsSortDescending</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    PlatformSupportPluginConfig</span><span style="color:#89DDFF;">?</span><span style="color:#C0CAF5;"> initialConfig</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> null</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s an example of how it could be initialized:</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#C0CAF5;">PlatformSupportPluginConfig</span><span style="color:#C0CAF5;"> pluginConfig</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new(</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultOptions</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    [</span></span>
<span class="line"><span style="color:#89DDFF;">      new</span><span style="color:#C0CAF5;"> BoolOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Save Lyrics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Whether to search &amp; save lyrics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">      new</span><span style="color:#C0CAF5;"> StringOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Access Token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">The access token required for xyz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">&lt;SOME USER ACCESS TOKEN&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 50</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    ],</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultQuality</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Quality</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">_160kbps</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultFormat</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Format</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">mp3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultSearchResultsLimit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultSearchResultsSorting</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Sorting</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">Default</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    defaultSearchResultsSortDescending</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    initialConfig</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> existingUserConfig</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-options" tabindex="-1"><a class="header-anchor" href="#custom-options"><span>Custom Options</span></a></h2>`,6)),n("p",null,[s[27]||(s[27]=l("While the default plugin configs cover many useful properties (e.g., download quality, format, etc., in ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/PlatformSupportPluginConfig.html"},{default:a(()=>s[26]||(s[26]=[n("code",null,"PlatformSupportPluginConfig",-1)])),_:1}),s[28]||(s[28]=l("), you might need to ")),s[29]||(s[29]=n("strong",null,"add",-1)),s[30]||(s[30]=l(" settings ")),s[31]||(s[31]=n("strong",null,"specific",-1)),s[32]||(s[32]=l(" to ")),s[33]||(s[33]=n("strong",null,"your",-1)),s[34]||(s[34]=l(" plugin, such as an access token, API key or anything else you can think of."))]),n("p",null,[s[37]||(s[37]=l("This is where the ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IOption.html"},{default:a(()=>s[35]||(s[35]=[n("code",null,"IOption",-1)])),_:1}),s[38]||(s[38]=l(" comes in. Every ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IPluginConfig.html"},{default:a(()=>s[36]||(s[36]=[n("code",null,"IPluginConfig",-1)])),_:1}),s[39]||(s[39]=l(" includes an array of these items, allowing you to add ")),s[40]||(s[40]=n("strong",null,"custom",-1)),s[41]||(s[41]=l(" settings you need. This approach allows you to extend the configuration options for your plugin, making it more ")),s[42]||(s[42]=n("strong",null,"versatile",-1)),s[43]||(s[43]=l(" and ")),s[44]||(s[44]=n("strong",null,"easier",-1)),s[45]||(s[45]=l(" for any users of your plugin."))]),s[90]||(s[90]=n("h3",{id:"types-of-ioption",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#types-of-ioption"},[n("span",null,[l("Types of "),n("code",null,"IOption")])])],-1)),n("p",null,[s[51]||(s[51]=l("There are ")),s[52]||(s[52]=n("strong",null,"different types",-1)),s[53]||(s[53]=l(" of options you can implement like ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/StringOption.html"},{default:a(()=>s[46]||(s[46]=[n("code",null,"StringOption",-1)])),_:1}),s[54]||(s[54]=l(", ")),s[55]||(s[55]=n("a",{href:"/plugin-api-reference/Melora.Plugins/Models/IntOption.html",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"IntOption")],-1)),s[56]||(s[56]=l(", ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/DoubleOption.html"},{default:a(()=>s[47]||(s[47]=[n("code",null,"DoubleOption",-1)])),_:1}),s[57]||(s[57]=l(", ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/BoolOption.html"},{default:a(()=>s[48]||(s[48]=[n("code",null,"BoolOption",-1)])),_:1}),s[58]||(s[58]=l(" and ")),o(e,{to:"/plugin-development/Melora/plugin-api-reference/Melora.Plugins/Models/SelectableOption.html"},{default:a(()=>s[49]||(s[49]=[n("code",null,"SelectableOption",-1)])),_:1}),s[59]||(s[59]=l(". All of these implement the ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IOption.html"},{default:a(()=>s[50]||(s[50]=[n("code",null,"IOption",-1)])),_:1}),s[60]||(s[60]=l(" interface but also include different parameters to restrict users from setting out of bound values."))]),s[91]||(s[91]=t(`<h4 id="stringoption" tabindex="-1"><a class="header-anchor" href="#stringoption"><span>StringOption:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> StringOption</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The name of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> description</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The description of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The value of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    int</span><span style="color:#C0CAF5;"> maxLength</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The max length of the value.</span></span>
<span class="line"><span style="color:#BB9AF7;">    bool</span><span style="color:#C0CAF5;"> isObscured</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> false</span><span style="color:#89DDFF;">)</span><span style="color:#51597D;font-style:italic;"> // Whether the value should be obscured in the UI.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="intoption" tabindex="-1"><a class="header-anchor" href="#intoption"><span>IntOption:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> IntOption</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The name of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> description</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The description of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    int</span><span style="color:#C0CAF5;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The value of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    int</span><span style="color:#C0CAF5;"> minimum</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;"> int</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">MinValue</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The minimum the value needs to be.</span></span>
<span class="line"><span style="color:#BB9AF7;">    int</span><span style="color:#C0CAF5;"> maximum</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;"> int</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">MaxValue</span><span style="color:#89DDFF;">)</span><span style="color:#51597D;font-style:italic;"> // The maximum the value can be.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="doubleoption" tabindex="-1"><a class="header-anchor" href="#doubleoption"><span>DoubleOption:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> DoubleOption</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The name of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> description</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The description of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    double</span><span style="color:#C0CAF5;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The value of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    double</span><span style="color:#C0CAF5;"> minimum</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;"> double</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">MinValue</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The minimum the value needs to be.</span></span>
<span class="line"><span style="color:#BB9AF7;">    double</span><span style="color:#C0CAF5;"> maximum</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;"> double</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">MaxValue</span><span style="color:#89DDFF;">)</span><span style="color:#51597D;font-style:italic;"> // The maximum the value can be.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="doubleoption-1" tabindex="-1"><a class="header-anchor" href="#doubleoption-1"><span>DoubleOption:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> DoubleOption</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The name of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> description</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The description of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    bool</span><span style="color:#C0CAF5;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#51597D;font-style:italic;"> // The value of the option.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="selectableoption" tabindex="-1"><a class="header-anchor" href="#selectableoption"><span>SelectableOption:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> SelectableOption</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The name of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> description</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The description of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#C0CAF5;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // The value of the option.</span></span>
<span class="line"><span style="color:#BB9AF7;">    string</span><span style="color:#89DDFF;">[]</span><span style="color:#C0CAF5;"> items</span><span style="color:#89DDFF;">)</span><span style="color:#51597D;font-style:italic;"> // The items from which can be selected.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="how-to-use-them" tabindex="-1"><a class="header-anchor" href="#how-to-use-them"><span>How To Use Them?</span></a></h3><p>When creating your config, simply pass the default options in the constructor. Melora will ensure these custom settings are populated in the user&#39;s config when your plugin is loaded.</p>`,12)),n("p",null,[s[64]||(s[64]=l("To access custom settings in your plugin code, use the ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/PluginConfigExtensions.html"},{default:a(()=>s[61]||(s[61]=[l("extension methods")])),_:1}),s[65]||(s[65]=l(" for ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IPluginConfig.html"},{default:a(()=>s[62]||(s[62]=[n("code",null,"IPluginConfig",-1)])),_:1}),s[66]||(s[66]=l(". This method ")),s[67]||(s[67]=n("strong",null,"retrieves",-1)),s[68]||(s[68]=l(" and ")),s[69]||(s[69]=n("strong",null,"casts",-1)),s[70]||(s[70]=l(" the value to the specified type. If the option is not found or the type does not match, it throws a ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Exceptions/PluginOptionException.html"},{default:a(()=>s[63]||(s[63]=[n("code",null,"PluginOptionException",-1)])),_:1}),s[71]||(s[71]=l("."))]),s[92]||(s[92]=t(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#BB9AF7;">string</span><span style="color:#C0CAF5;"> accessToken</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">GetStringOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Access Token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BB9AF7;">int</span><span style="color:#C0CAF5;"> artworkResolution</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">GetIntOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Artwork Resolution</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BB9AF7;">double</span><span style="color:#C0CAF5;"> artworkQuality</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">GetDoubleOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Artwork Quality</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BB9AF7;">bool</span><span style="color:#C0CAF5;"> saveLyrics</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">GetBoolOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Save Lyrics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BB9AF7;">string</span><span style="color:#C0CAF5;"> mediaType</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">GetSelectableOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Media Type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handle-config-updates" tabindex="-1"><a class="header-anchor" href="#handle-config-updates"><span>Handle Config Updates</span></a></h2><p>It may happen that users change some of your plugin settings. While dynamic use of config values is straightforward, you might need to <strong>reinitialize</strong> components based on updated config values (like a <strong>client</strong> with a new <strong>Client ID</strong>).</p>`,3)),n("p",null,[s[75]||(s[75]=l("To handle these situations, ")),s[76]||(s[76]=n("strong",null,"all",-1)),s[77]||(s[77]=l(" specific plugin configs, such as ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Models/PlatformSupportPluginConfig.html"},{default:a(()=>s[72]||(s[72]=[n("code",null,"PlatformSupportPluginConfig",-1)])),_:1}),s[78]||(s[78]=l(" and ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/MetadataPlugin.html"},{default:a(()=>s[73]||(s[73]=[n("code",null,"MetadataPlugin",-1)])),_:1}),s[79]||(s[79]=l(", as well as ")),o(e,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IOption.html"},{default:a(()=>s[74]||(s[74]=[n("code",null,"IOption",-1)])),_:1}),s[80]||(s[80]=l(", implement the ")),s[81]||(s[81]=n("a",{href:"https://learn.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"INotifyPropertyChanged")],-1)),s[82]||(s[82]=l(" and ")),s[83]||(s[83]=n("a",{href:"https://learn.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanging",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"INotifyPropertyChanging")],-1)),s[84]||(s[84]=l(" interface. This allows you to easily subscribe to property change events and update your plugin as needed."))]),s[93]||(s[93]=t(`<h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example:</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#7AA2F7;"> SpotifyPlugin</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> :</span><span style="color:#F7768E;"> this</span><span style="color:#89DDFF;">(</span><span style="color:#FF9E64;">null</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> null</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C0CAF5;">    wrapper</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new(</span><span style="color:#C0CAF5;">Config</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> logger</span><span style="color:#89DDFF;">);</span></span>
<span class="line highlighted"><span style="color:#C0CAF5;">    Config</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">PropertyChanged</span><span style="color:#89DDFF;"> +=</span><span style="color:#C0CAF5;"> OnConfigPropertyChanged</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">void</span><span style="color:#7AA2F7;"> OnConfigPropertyChanged</span><span style="color:#89DDFF;">(</span><span style="color:#BB9AF7;">object</span><span style="color:#89DDFF;">?</span><span style="color:#C0CAF5;"> sender</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> PropertyChangedEventArgs</span><span style="color:#C0CAF5;"> e</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BB9AF7;">    switch</span><span style="color:#89DDFF;"> (</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">PropertyName</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#BB9AF7;">        case</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Client ID</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BB9AF7;">        case</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Client Secret</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line highlighted"><span style="color:#C0CAF5;">            wrapper</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">ReauthenticateClient</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">            break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BB9AF7;">        case</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Genius Access Token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line highlighted"><span style="color:#C0CAF5;">            wrapper</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">ReauthenticateGeniusClient</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">            break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>OnConfigPropertyChanged</code> method handles changes based on the <code>PropertyName</code> provided by the <code>PropertyChangedEventArgs</code>.</li><li>If certain settings change (e.g., <strong>&quot;Client ID&quot;</strong> or <strong>&quot;Client Secret&quot;</strong>), you can reinitialize or re-authenticate components as needed.</li></ul><div class="hint-container info"><p class="hint-container-title">Note</p><p>You <strong>don&#39;t need</strong> to manually subscribe to each custom <code>IOption</code>&#39;s PropertyChanged event. They will automatically forward their <code>PropertyChanged</code> events, simplifying the process.</p></div><h2 id="how-users-modify-your-config" tabindex="-1"><a class="header-anchor" href="#how-users-modify-your-config"><span>How Users Modify Your Config</span></a></h2><p>Once your plugin is set up with configurable options, users can <strong>easily</strong> adjust these settings through Melora&#39;s interface. They simply navigate to the <strong>Settings</strong> page, find your plugin, and modify the configuration as needed.</p><h4 id="platform-support-plugin-settings" tabindex="-1"><a class="header-anchor" href="#platform-support-plugin-settings"><span>Platform-Support Plugin Settings:</span></a></h4><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="metadata-settings" tabindex="-1"><a class="header-anchor" href="#metadata-settings"><span>Metadata Settings:</span></a></h4><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10))])}const v=r(y,[["render",F],["__file","configs.html.vue"]]),C=JSON.parse(`{"path":"/plugin-development/configs.html","title":"Configs","lang":"en-US","frontmatter":{"title":"Configs","icon":"icon-park-outline:setting-config","order":4,"description":"When building a plugin, you may need to store settings that users can customize. Melora makes this easy by integrating your plugin's configs into the main Melora configuration. ...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://localhost/Melora/plugin-development/configs.html"}],["meta",{"property":"og:site_name","content":"Melora"}],["meta",{"property":"og:title","content":"Configs"}],["meta",{"property":"og:description","content":"When building a plugin, you may need to store settings that users can customize. Melora makes this easy by integrating your plugin's configs into the main Melora configuration. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://localhost/Melora/guide/platform-support-configure.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Configs\\",\\"image\\":[\\"https://localhost/Melora/guide/platform-support-configure.webp\\",\\"https://localhost/Melora/guide/metadata-configure.webp\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"IcySnex\\",\\"url\\":\\"https://github.com/IcySnex\\"}]}"]]},"headers":[{"level":2,"title":"What Is A Config?","slug":"what-is-a-config","link":"#what-is-a-config","children":[]},{"level":2,"title":"Custom Options","slug":"custom-options","link":"#custom-options","children":[{"level":3,"title":"Types of IOption","slug":"types-of-ioption","link":"#types-of-ioption","children":[]},{"level":3,"title":"How To Use Them?","slug":"how-to-use-them","link":"#how-to-use-them","children":[]}]},{"level":2,"title":"Handle Config Updates","slug":"handle-config-updates","link":"#handle-config-updates","children":[]},{"level":2,"title":"How Users Modify Your Config","slug":"how-users-modify-your-config","link":"#how-users-modify-your-config","children":[]}],"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"plugin-development/configs.md","autoDesc":true}`);export{v as comp,C as data};
