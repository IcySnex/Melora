import{_ as o,c as r,a as t,e as a,d as l,f as s,b as i,r as d,o as p}from"./app-DS8RxCfC.js";const c={};function u(g,e){const n=d("RouteLink");return p(),r("div",null,[e[15]||(e[15]=t("h1",{id:"metadataplugin",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#metadataplugin"},[t("span",null,"MetadataPlugin")])],-1)),e[16]||(e[16]=t("p",null,"Represents a plugin which writes track metadata after downloading.",-1)),t("ul",null,[e[6]||(e[6]=t("li",null,[t("strong",null,"Type:"),a(" Class")],-1)),t("li",null,[e[1]||(e[1]=t("strong",null,"Namespace:",-1)),e[2]||(e[2]=a()),l(n,{to:"/plugin-api-reference/Melora.Plugins/Abstract/"},{default:s(()=>e[0]||(e[0]=[a("Melora.Plugins.Abstract")])),_:1})]),t("li",null,[e[4]||(e[4]=t("strong",null,"Implements:",-1)),e[5]||(e[5]=a()),l(n,{to:"/plugin-api-reference/Melora.Plugins/Abstract/IPlugin.html"},{default:s(()=>e[3]||(e[3]=[a("IPlugin")])),_:1})])]),e[17]||(e[17]=i(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> MetadataPlugin</span><span style="color:#89DDFF;"> :</span><span style="color:#C0CAF5;"> IPlugin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="writeasync" tabindex="-1"><a class="header-anchor" href="#writeasync"><span>WriteAsync</span></a></h3><p>Writes the metadate from the downloadable track to the file.</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1a1b26;color:#a9b1d6;"><pre class="shiki tokyo-night vp-code"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#9D7CD8;font-style:italic;"> abstract</span><span style="color:#C0CAF5;"> Task</span><span style="color:#7AA2F7;"> WriteAsync</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BB9AF7;">  string</span><span style="color:#C0CAF5;"> filePath</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#C0CAF5;">  DownloadableTrack</span><span style="color:#C0CAF5;"> track</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#C0CAF5;">  CancellationToken</span><span style="color:#C0CAF5;"> cancellationToken</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Parameter</th><th>Summary</th></tr></thead><tbody><tr><td><code>string</code> filePath</td><td>The path to the audio file.</td></tr><tr><td><code>DownloadableTrack</code> track</td><td>The downloadable track containing the metadata.</td></tr><tr><td><em>(optional)</em> <code>CancellationToken</code> cancellationToken</td><td>The token to cancel this action.</td></tr></tbody></table><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><h3 id="kind" tabindex="-1"><a class="header-anchor" href="#kind"><span>Kind</span></a></h3><p>The kind of the plugin.</p>`,9)),t("ul",null,[t("li",null,[e[8]||(e[8]=t("strong",null,"Type:",-1)),e[9]||(e[9]=a()),l(n,{to:"/plugin-api-reference/Melora.Plugins/Enums/PluginKind.html"},{default:s(()=>e[7]||(e[7]=[a("Melora.Plugins.Enums.PluginKind")])),_:1})]),e[10]||(e[10]=t("li",null,[t("strong",null,"Is Read Only:"),a(),t("code",null,"True")],-1))]),e[18]||(e[18]=i('<h3 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>Name</span></a></h3><p>The name of the plugin.</p><ul><li><strong>Type:</strong> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">System.String</a></li><li><strong>Is Read Only:</strong> <code>True</code></li></ul><h3 id="iconpathdata" tabindex="-1"><a class="header-anchor" href="#iconpathdata"><span>IconPathData</span></a></h3><p>The svg path data for the plugin icon.</p><ul><li><strong>Type:</strong> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">System.String</a></li><li><strong>Is Read Only:</strong> <code>True</code></li></ul><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>Config</span></a></h3><p>The config for the plugin.</p>',8)),t("ul",null,[t("li",null,[e[12]||(e[12]=t("strong",null,"Type:",-1)),e[13]||(e[13]=a()),l(n,{to:"/plugin-api-reference/Melora.Plugins/Models/MetadataPluginConfig.html"},{default:s(()=>e[11]||(e[11]=[a("Melora.Plugins.Models.MetadataPluginConfig")])),_:1})]),e[14]||(e[14]=t("li",null,[t("strong",null,"Is Read Only:"),a(),t("code",null,"True")],-1))])])}const m=o(c,[["render",u],["__file","MetadataPlugin.html.vue"]]),y=JSON.parse('{"path":"/plugin-api-reference/Melora.Plugins/Abstract/MetadataPlugin.html","title":"MetadataPlugin","lang":"en-US","frontmatter":{"description":"MetadataPlugin Represents a plugin which writes track metadata after downloading. Type: Class Namespace: Implements: Methods WriteAsync Writes the metadate from the downloadable...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://localhost/Melora/plugin-api-reference/Melora.Plugins/Abstract/MetadataPlugin.html"}],["meta",{"property":"og:site_name","content":"Melora"}],["meta",{"property":"og:title","content":"MetadataPlugin"}],["meta",{"property":"og:description","content":"MetadataPlugin Represents a plugin which writes track metadata after downloading. Type: Class Namespace: Implements: Methods WriteAsync Writes the metadate from the downloadable..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MetadataPlugin\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"IcySnex\\",\\"url\\":\\"https://github.com/IcySnex\\"}]}"]]},"headers":[{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"WriteAsync","slug":"writeasync","link":"#writeasync","children":[]}]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[{"level":3,"title":"Kind","slug":"kind","link":"#kind","children":[]},{"level":3,"title":"Name","slug":"name","link":"#name","children":[]},{"level":3,"title":"IconPathData","slug":"iconpathdata","link":"#iconpathdata","children":[]},{"level":3,"title":"Config","slug":"config","link":"#config","children":[]}]}],"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"plugin-api-reference/Melora.Plugins/Abstract/MetadataPlugin.md","autoDesc":true}');export{m as comp,y as data};
